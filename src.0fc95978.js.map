{"version":3,"sources":["js/timer.js","index.js"],"names":["pad","value","String","padStart","getTimeComponents","time","days","Math","floor","hours","mins","secs","refs","document","querySelector","updateTimerFace","innerHTML","CountdownTimer","selector","targetDate","data","setInterval","currentTime","Date","now","timer1","start"],"mappings":";;;AAoDA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnDA,SAASA,EAAIC,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrC,SAASC,EAAkBC,GAKhB,MAAA,CAAEC,KAJEN,EAAIO,KAAKC,MAAMH,EAAQ,QAInBI,MAHHT,EAAIO,KAAKC,MAAOH,EAAQ,MAAyB,OAGvCK,KAFXV,EAAIO,KAAKC,MAAOH,EAAQ,KAAoB,MAE3BM,KADjBX,EAAIO,KAAKC,MAAOH,EAAQ,IAAc,OAIrD,IAAMO,EAAO,CACTN,KAAMO,SAASC,cAAc,uBAC7BL,MAAOI,SAASC,cAAc,wBAC9BJ,KAAMG,SAASC,cAAc,uBAC7BH,KAAME,SAASC,cAAc,wBAGjC,SAASC,EAA6C,GAA3BT,IAAAA,EAAAA,EAAAA,KAAMG,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAE1CC,EAAKN,KAAKU,UAAeV,GAAAA,OAAAA,GACzBM,EAAKH,MAAMO,UAAeP,GAAAA,OAAAA,GAC1BG,EAAKF,KAAKM,UAAeN,GAAAA,OAAAA,GACzBE,EAAKD,KAAKK,UAAeL,GAAAA,OAAAA,GAGvBM,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAa,EAAA,KAAA,GAC3BD,KAAAA,SAAWA,EACXE,KAAAA,KAAOD,EAqBpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAjBI,MAAA,WAAQ,IAAA,EAAA,KACJE,YAAY,WACFC,IAAAA,EAAcC,KAAKC,MAGWpB,EAAAA,EADlB,EAAKgB,KAAOE,GAG9BP,EAAgB,CAAET,KAFVA,EAAAA,KAEgBG,MAFVA,EAAAA,MAEiBC,KAFVA,EAAAA,KAEgBC,KAFVA,EAAAA,QAG5B,SASX,EAxBMM,GAmBAQ,EAAS,IAAIR,EAAe,CAChCC,SAAU,WACVC,WAAY,IAAII,KAAK,kBAGvBE,EAAOC;;ACnDP,aADA,QAAA,oBACA,QAAA","file":"src.0fc95978.js","sourceRoot":"../src","sourcesContent":["\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n}\n\nfunction getTimeComponents(time) {\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n}\n\nconst refs = {\n    days: document.querySelector('[data-value=\"days\"]'),\n    hours: document.querySelector('[data-value=\"hours\"]'),\n    mins: document.querySelector('[data-value=\"mins\"]'),\n    secs: document.querySelector('[data-value=\"secs\"]')\n}\n\nfunction updateTimerFace({ days, hours, mins, secs }) {\n    // console.log(`${days}:${hours}:${mins}:${secs}`);\n    refs.days.innerHTML = `${days}`;\n    refs.hours.innerHTML = `${hours}`;\n    refs.mins.innerHTML = `${mins}`;\n    refs.secs.innerHTML = `${secs}`;\n};\n\nclass CountdownTimer {\n    constructor({selector, targetDate}) {\n        this.selector = selector;\n        this.data = targetDate;\n        // console.log(this.data);\n    }\n\n    start() {\n        setInterval(() => {\n            const currentTime = Date.now();\n            // console.log(currentTime);\n            const deltaTime = this.data - currentTime;\n            const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n            // console.log(`${days}:${hours}:${mins}:${secs}`)\n            updateTimerFace({ days, hours, mins, secs });\n        }, 1000)\n    }\n}\n\nconst timer1 = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2021'),\n});\n\ntimer1.start();\n","import './sass/main.scss';\nimport './js/timer';\n"]}